#!/bin/bash
set -x

TREE_STATE=clean
COMMIT=${COMMIT:-${DRONE_COMMIT:-${GITHUB_SHA:-unknown}}}
TAG=${TAG:-${DRONE_TAG:-$GITHUB_TAG}}

# If we're in a dapperized environment, we should be able to figure out what our current tag and commit are. 

if [ -d .git ]; then
    
    if [ -n "$(git status --porcelain --untracked-files=no)" ]; then
        DIRTY="dirty"
        TREE_STATE=dirty
    fi
    
    if [[ "$TREE_STATE" == "clean" && -z "$TAG" ]]; then
        TAG=$(git tag -l --contains HEAD | head -n 1) # this is going to not work if you have multiple tags pointing to the same commit
    fi

    COMMIT=$(git rev-parse HEAD)
    if [ -z "$COMMIT" ]; then
        COMMIT=$(git rev-parse HEAD || true)
        echo $COMMIT
        exit 1
    fi
fi

if [[ -n "$TAG" ]]; then
    if [[ "$TREE_STATE" = "clean" ]]; then
        VERSION=$TAG # We will only accept the tag as our version if the tree state is clean and the tag is in fact defined.
    fi
fi

if [[ -z "$VERSION" ]]; then

    RPM_CHANNEL=testing # We don't have a version or tag set, so just assume we're going to upload to testing anyway.
    RPM_VERSION=HEAD
    
else # validate the tag format

    if ! [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+\.[a-z]+$ ]]; then
        echo "Tag does not match our expected format. Exiting."
        exit 1
    fi

    rpm_version_regex='s/^(.*)\.(.*)$/\1/;' # will take v1.2.13.testing and provide "v1.2.13"
    rpm_channel_regex='s/^.*\.(.*)$/\1/;' # will take v1.2.13.testing and provide "testing"

    RPM_VERSION=$(sed -E -e "$rpm_version_regex" <<<"$VERSION")
    RPM_CHANNEL=$(sed -E -e "$rpm_channel_regex" <<<"$VERSION")


    if [[ "$RPM_CHANNEL" == "$VERSION" ]]; then
        echo "Unknown RPM_CHANNEL found: $RPM_CHANNEL but defaulting to testing"
        RPM_CHANNEL="testing"
    fi

fi

case "$RPM_CHANNEL" in
    "testing"|"latest"|"stable")
        echo "RPM_CHANNEL matched our expected variants"
        ;;
    *)
        echo "RPM_CHANNEL $RPM_CHANNEL does not match one of: [testing, latest, stable]"
        exit 1
        ;;
esac 